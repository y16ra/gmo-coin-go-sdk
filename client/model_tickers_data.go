/*
GMO Coin APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: dev@tricoro.tech
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// TickersData struct for TickersData
type TickersData struct {
	Ask *int32 `json:"ask,omitempty"`
	Bid *int32 `json:"bid,omitempty"`
	High *int32 `json:"high,omitempty"`
	Last *int32 `json:"last,omitempty"`
	Low *int32 `json:"low,omitempty"`
	Symbol *Symbols `json:"symbol,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Volume *float64 `json:"volume,omitempty"`
}

// NewTickersData instantiates a new TickersData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTickersData() *TickersData {
	this := TickersData{}
	return &this
}

// NewTickersDataWithDefaults instantiates a new TickersData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTickersDataWithDefaults() *TickersData {
	this := TickersData{}
	return &this
}

// GetAsk returns the Ask field value if set, zero value otherwise.
func (o *TickersData) GetAsk() int32 {
	if o == nil || o.Ask == nil {
		var ret int32
		return ret
	}
	return *o.Ask
}

// GetAskOk returns a tuple with the Ask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetAskOk() (*int32, bool) {
	if o == nil || o.Ask == nil {
		return nil, false
	}
	return o.Ask, true
}

// HasAsk returns a boolean if a field has been set.
func (o *TickersData) HasAsk() bool {
	if o != nil && o.Ask != nil {
		return true
	}

	return false
}

// SetAsk gets a reference to the given int32 and assigns it to the Ask field.
func (o *TickersData) SetAsk(v int32) {
	o.Ask = &v
}

// GetBid returns the Bid field value if set, zero value otherwise.
func (o *TickersData) GetBid() int32 {
	if o == nil || o.Bid == nil {
		var ret int32
		return ret
	}
	return *o.Bid
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetBidOk() (*int32, bool) {
	if o == nil || o.Bid == nil {
		return nil, false
	}
	return o.Bid, true
}

// HasBid returns a boolean if a field has been set.
func (o *TickersData) HasBid() bool {
	if o != nil && o.Bid != nil {
		return true
	}

	return false
}

// SetBid gets a reference to the given int32 and assigns it to the Bid field.
func (o *TickersData) SetBid(v int32) {
	o.Bid = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *TickersData) GetHigh() int32 {
	if o == nil || o.High == nil {
		var ret int32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetHighOk() (*int32, bool) {
	if o == nil || o.High == nil {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *TickersData) HasHigh() bool {
	if o != nil && o.High != nil {
		return true
	}

	return false
}

// SetHigh gets a reference to the given int32 and assigns it to the High field.
func (o *TickersData) SetHigh(v int32) {
	o.High = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *TickersData) GetLast() int32 {
	if o == nil || o.Last == nil {
		var ret int32
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetLastOk() (*int32, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *TickersData) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given int32 and assigns it to the Last field.
func (o *TickersData) SetLast(v int32) {
	o.Last = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *TickersData) GetLow() int32 {
	if o == nil || o.Low == nil {
		var ret int32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetLowOk() (*int32, bool) {
	if o == nil || o.Low == nil {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *TickersData) HasLow() bool {
	if o != nil && o.Low != nil {
		return true
	}

	return false
}

// SetLow gets a reference to the given int32 and assigns it to the Low field.
func (o *TickersData) SetLow(v int32) {
	o.Low = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *TickersData) GetSymbol() Symbols {
	if o == nil || o.Symbol == nil {
		var ret Symbols
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetSymbolOk() (*Symbols, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *TickersData) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given Symbols and assigns it to the Symbol field.
func (o *TickersData) SetSymbol(v Symbols) {
	o.Symbol = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TickersData) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TickersData) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TickersData) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *TickersData) GetVolume() float64 {
	if o == nil || o.Volume == nil {
		var ret float64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TickersData) GetVolumeOk() (*float64, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *TickersData) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float64 and assigns it to the Volume field.
func (o *TickersData) SetVolume(v float64) {
	o.Volume = &v
}

func (o TickersData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ask != nil {
		toSerialize["ask"] = o.Ask
	}
	if o.Bid != nil {
		toSerialize["bid"] = o.Bid
	}
	if o.High != nil {
		toSerialize["high"] = o.High
	}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.Low != nil {
		toSerialize["low"] = o.Low
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableTickersData struct {
	value *TickersData
	isSet bool
}

func (v NullableTickersData) Get() *TickersData {
	return v.value
}

func (v *NullableTickersData) Set(val *TickersData) {
	v.value = val
	v.isSet = true
}

func (v NullableTickersData) IsSet() bool {
	return v.isSet
}

func (v *NullableTickersData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTickersData(val *TickersData) *NullableTickersData {
	return &NullableTickersData{value: val, isSet: true}
}

func (v NullableTickersData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTickersData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


