/*
GMO Coin APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: dev@tricoro.tech
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject struct for InlineObject
type InlineObject struct {
	Symbol *Symbols `json:"symbol,omitempty"`
	Side *string `json:"side,omitempty"`
	ExecutionType *string `json:"executionType,omitempty"`
	TimeInForce *string `json:"timeInForce,omitempty"`
	Price *string `json:"price,omitempty"`
	LosscutPrice *string `json:"losscutPrice,omitempty"`
	Size *string `json:"size,omitempty"`
	CancelBefore *bool `json:"cancelBefore,omitempty"`
}

// NewInlineObject instantiates a new InlineObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject() *InlineObject {
	this := InlineObject{}
	return &this
}

// NewInlineObjectWithDefaults instantiates a new InlineObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObjectWithDefaults() *InlineObject {
	this := InlineObject{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *InlineObject) GetSymbol() Symbols {
	if o == nil || o.Symbol == nil {
		var ret Symbols
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetSymbolOk() (*Symbols, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *InlineObject) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given Symbols and assigns it to the Symbol field.
func (o *InlineObject) SetSymbol(v Symbols) {
	o.Symbol = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *InlineObject) GetSide() string {
	if o == nil || o.Side == nil {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetSideOk() (*string, bool) {
	if o == nil || o.Side == nil {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *InlineObject) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *InlineObject) SetSide(v string) {
	o.Side = &v
}

// GetExecutionType returns the ExecutionType field value if set, zero value otherwise.
func (o *InlineObject) GetExecutionType() string {
	if o == nil || o.ExecutionType == nil {
		var ret string
		return ret
	}
	return *o.ExecutionType
}

// GetExecutionTypeOk returns a tuple with the ExecutionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetExecutionTypeOk() (*string, bool) {
	if o == nil || o.ExecutionType == nil {
		return nil, false
	}
	return o.ExecutionType, true
}

// HasExecutionType returns a boolean if a field has been set.
func (o *InlineObject) HasExecutionType() bool {
	if o != nil && o.ExecutionType != nil {
		return true
	}

	return false
}

// SetExecutionType gets a reference to the given string and assigns it to the ExecutionType field.
func (o *InlineObject) SetExecutionType(v string) {
	o.ExecutionType = &v
}

// GetTimeInForce returns the TimeInForce field value if set, zero value otherwise.
func (o *InlineObject) GetTimeInForce() string {
	if o == nil || o.TimeInForce == nil {
		var ret string
		return ret
	}
	return *o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetTimeInForceOk() (*string, bool) {
	if o == nil || o.TimeInForce == nil {
		return nil, false
	}
	return o.TimeInForce, true
}

// HasTimeInForce returns a boolean if a field has been set.
func (o *InlineObject) HasTimeInForce() bool {
	if o != nil && o.TimeInForce != nil {
		return true
	}

	return false
}

// SetTimeInForce gets a reference to the given string and assigns it to the TimeInForce field.
func (o *InlineObject) SetTimeInForce(v string) {
	o.TimeInForce = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *InlineObject) GetPrice() string {
	if o == nil || o.Price == nil {
		var ret string
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetPriceOk() (*string, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *InlineObject) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given string and assigns it to the Price field.
func (o *InlineObject) SetPrice(v string) {
	o.Price = &v
}

// GetLosscutPrice returns the LosscutPrice field value if set, zero value otherwise.
func (o *InlineObject) GetLosscutPrice() string {
	if o == nil || o.LosscutPrice == nil {
		var ret string
		return ret
	}
	return *o.LosscutPrice
}

// GetLosscutPriceOk returns a tuple with the LosscutPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetLosscutPriceOk() (*string, bool) {
	if o == nil || o.LosscutPrice == nil {
		return nil, false
	}
	return o.LosscutPrice, true
}

// HasLosscutPrice returns a boolean if a field has been set.
func (o *InlineObject) HasLosscutPrice() bool {
	if o != nil && o.LosscutPrice != nil {
		return true
	}

	return false
}

// SetLosscutPrice gets a reference to the given string and assigns it to the LosscutPrice field.
func (o *InlineObject) SetLosscutPrice(v string) {
	o.LosscutPrice = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *InlineObject) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *InlineObject) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *InlineObject) SetSize(v string) {
	o.Size = &v
}

// GetCancelBefore returns the CancelBefore field value if set, zero value otherwise.
func (o *InlineObject) GetCancelBefore() bool {
	if o == nil || o.CancelBefore == nil {
		var ret bool
		return ret
	}
	return *o.CancelBefore
}

// GetCancelBeforeOk returns a tuple with the CancelBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject) GetCancelBeforeOk() (*bool, bool) {
	if o == nil || o.CancelBefore == nil {
		return nil, false
	}
	return o.CancelBefore, true
}

// HasCancelBefore returns a boolean if a field has been set.
func (o *InlineObject) HasCancelBefore() bool {
	if o != nil && o.CancelBefore != nil {
		return true
	}

	return false
}

// SetCancelBefore gets a reference to the given bool and assigns it to the CancelBefore field.
func (o *InlineObject) SetCancelBefore(v bool) {
	o.CancelBefore = &v
}

func (o InlineObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Side != nil {
		toSerialize["side"] = o.Side
	}
	if o.ExecutionType != nil {
		toSerialize["executionType"] = o.ExecutionType
	}
	if o.TimeInForce != nil {
		toSerialize["timeInForce"] = o.TimeInForce
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.LosscutPrice != nil {
		toSerialize["losscutPrice"] = o.LosscutPrice
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.CancelBefore != nil {
		toSerialize["cancelBefore"] = o.CancelBefore
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject struct {
	value *InlineObject
	isSet bool
}

func (v NullableInlineObject) Get() *InlineObject {
	return v.value
}

func (v *NullableInlineObject) Set(val *InlineObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject(val *InlineObject) *NullableInlineObject {
	return &NullableInlineObject{value: val, isSet: true}
}

func (v NullableInlineObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


