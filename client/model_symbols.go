/*
GMO Coin APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
Contact: dev@tricoro.tech
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// Symbols Crypted currency symbols
type Symbols string

// List of Symbols
const (
	BTC Symbols = "BTC"
	ETH Symbols = "ETH"
	BCH Symbols = "BCH"
	LTC Symbols = "LTC"
	XRP Symbols = "XRP"
	XEM Symbols = "XEM"
	XLM Symbols = "XLM"
	XYM Symbols = "XYM"
)

// All allowed values of Symbols enum
var AllowedSymbolsEnumValues = []Symbols{
	"BTC",
	"ETH",
	"BCH",
	"LTC",
	"XRP",
	"XEM",
	"XLM",
	"XYM",
}

func (v *Symbols) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Symbols(value)
	for _, existing := range AllowedSymbolsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Symbols", value)
}

// NewSymbolsFromValue returns a pointer to a valid Symbols
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSymbolsFromValue(v string) (*Symbols, error) {
	ev := Symbols(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Symbols: valid values are %v", v, AllowedSymbolsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Symbols) IsValid() bool {
	for _, existing := range AllowedSymbolsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Symbols value
func (v Symbols) Ptr() *Symbols {
	return &v
}

type NullableSymbols struct {
	value *Symbols
	isSet bool
}

func (v NullableSymbols) Get() *Symbols {
	return v.value
}

func (v *NullableSymbols) Set(val *Symbols) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbols) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbols) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbols(val *Symbols) *NullableSymbols {
	return &NullableSymbols{value: val, isSet: true}
}

func (v NullableSymbols) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbols) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

